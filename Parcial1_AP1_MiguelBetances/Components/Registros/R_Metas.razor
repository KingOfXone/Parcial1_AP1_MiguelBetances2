@page "/R_Metas"
@page "/R_Aporte/{MetasId:int}"
@using Parcial1_AP1_MiguelBetances.Components
@using Parcial1_AP1_MiguelBetances.Models
@using Parcial1_AP1_MiguelBetances.Service

<PageTitle>Registrar Metas</PageTitle>

<EditForm Model="metas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3 class="text-center">Registrar Metas</h3>
            </div>
            <div class=card-body>

                @*AporteId*@
                <div class="d-inline-block">
                    <label>AporteId:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="aporte.MetasId" class="form-control" aria-describedby="BotonBuscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class="oi oi-magnifying-glass" /></button>
                    </div>
                </div>

                @*Fecha*@
                <div class="mb-3 col-3 d-inline-block">
                    <label class="form-label">Fecha:</label>
                    <InputDate @bind-Value="metas.Fecha" class="form-control" placeholder="Fecha" />
                    <ValidationMessage For="@(() => metas.Fecha)" />
                </div>


                @*Persona*@
                <div class="mb-3">
                    <label class="form-label">Persona:</label>
                    <InputText @bind-Value="metas.Persona" class="form-control" placeholder="Nombre y Apellido" />
                    <ValidationMessage For="@(() => metas.Persona)" />
                </div>

                @*Observación*@
                <div class="mb-3">
                    <label class="form-label">Observación:</label>
                    <InputText @bind-Value="metas.Observacion" class="form-control" placeholder="Observación" />
                    <ValidationMessage For="@(() => metas.Observacion)" />
                </div>

                @*Monto*@
                <div class="mb-3">
                    <label class="form-label">Monto</label>
                    <InputNumber @bind-Value="metas.Monto" class="form-control" placeholder="Monto" />
                    <ValidationMessage For="@(() => metas.Monto)" />
                </div>
            </div>
        </div>

        <div class="card-footer d-flex justify-content-center">
            <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
            <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document" /></button>
            <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"> Eliminar <i class="oi oi-trash" /></button>
        </div>
    </div>

</EditForm>

@code {
    [Parameter]
    public int MetasId { get; set; }

    public Metas metas { get; set; } = new Metas();

    protected override void OnInitialized()
    {
        if (this.MetasId > 0)
        {
            this.aporte.AporteId = this.MetasId;
            Buscar();
        }
    }

    void Nuevo()
    {
        this.aporte = new Metas();
    }

    void Buscar()
    {
        var AporteEncontrado = metasService.Buscar(metas.MetasId);
        if (AporteEncontrado != null)
        {
            this.aporte = AporteEncontrado;
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No se ha encontrado",
                    Detail = "No se ha encontrado el Aporte que estaba buscando",
                    Duration = 4000
                };
            this.Nuevo();
        }
    }


    void Guardar()
    {
        if (aporte.AporteId < 0)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Id de las metas",
                    Detail = "El Id debe ser mayor que 0.",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            return;
        }
        if (metasService.Guardar(this.aporte))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Guardado",
                    Detail = "Se ha guardado correctamente.",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            this.Nuevo();
        }
    }

    void Eliminar()
    {

        if (metasService.Existe(metas.MetasId) && metasService.Eliminar(this.metas))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Eliminado",
                    Detail = "Se ha Eliminado correctamente.",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
        }
        else if (!metasService.Existe(metas.MetasId))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No se ha Eliminado",
                    Detail = "No tiene ningun dato para eliminar",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
        }
        else if (metasService.Eliminar(this.aporte))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No se ha Eliminado",
                    Detail = "No se ha Eliminado correctamente.",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
        }
        this.Nuevo();
    }
}
